Comando git:

git add --all
git commit -m "Texto"
git push

### DOCKER
###
### En la práctica usamos el contenedor: acarrasco2000/aos2023_notificaciones

# Crear y arrancar contenedor a partir de docker-compose.yaml
docker compose up

# Construir imagen de Dockerfile
docker build -t acarrasco2000/aos2023_notificaciones:v1 .

# Publicar imagen en docker hub
docker push acarrasco2000/aos2023_notificaciones:v1

# Arrancar imagen publicando puertos (mejor hacerlo desde docker desktop para ver logs)
docker container run -d -p 80:80 <contenedor>

# Ver la red conectada al contenedor 
docker inspect acarrasco2000/aos2023notificaciones -f "{{json .NetworkSettings.Networks }}"

# Ver todos los contenedores
docker ps

# Ejecutar comando "bash" en el contenedor (se usa el identificador que da docker ps)
docker exec -it 0ce7cfb9be37 bash

# NETWORKING dentro del contenedor:
# Entra al contenedor con bash
docker exec -it 0ce7cfb9be37 bash

# Instalar paquetes para ver conexiones
apt update
apt install net-tools
apt-get install -y iputils-ping
apt-get install xinetd telnetd
apt-get install dnsutils
apt-get install traceroute
apt-get install curl
apt-get install netcat

# Ver todas las conexiones
netstat -an

# Ver procesos que escuchan en las conexiones
netstat -tulnp

# Comprobar conectividad a servidores externos
ping -t 8.8.8.8
ping -t www.google.com

# Comprobar puerto remoto está abierto
nc -z -v microsoft.com 443

# Comprobar código de respuesta HTTP
curl -Iv https://microsoft.com


### AZURE KUBERNETES SERVICES
###
### ACCESO AL PORTAL DE AZURE:
### https://portal.azure.com/
### https://portal.azure.com/#powershell
#
# Pre-requisito: Instalar Azure Powershell
# Ver https://learn.microsoft.com/es-es/powershell/azure/azurerm/install-azurerm-ps?view=azurermps-6.13.0
#
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Install-Module -Name AzureRM -AllowClobber
# Descarga e instalar el MSI

# En la práctica vamos a usar estos nombres de grupo de recursos y registro ACR en Azure
#
# ResourceGroupName: aos_2023_notificaciones (sin el prefijo acarrasco2000)
# ACRname: aos2023notificaciones
#
# Los siguientes son comandos de Azure Powershell publican un servicio en AKS siguiendo el tutorial:
# https://learn.microsoft.com/es-es/azure/aks/tutorial-kubernetes-prepare-acr?tabs=azure-cli
#
# Estos comandos se pueden ejecutar desde el Azure Powershell instalado o accediendo a https:/portal.azure.com/#cloudshell

### PASO 1.1 - Creación de un registro de contenedor ###

# Comprobar version de Azure Powershell (debe ser 5.9.0 o posterior)
Get-InstalledModule -Name Az

# Crear grupo de recursos
New-AzResourceGroup -Name aos2023notificaciones -Location eastus

# Crea registro ACR
New-AzContainerRegistry -ResourceGroupName aos2023notificaciones -Name aos2023notificaciones -Sku Basic

# Inicio de sesion
Connect-AzContainerRegistry -Name aos2023notificaciones

# Direccion del servidor de inicio de registro (usar nombre del grupo sin el prefijo acarrasco2000)
(Get-AzContainerRegistry -ResourceGroupName aos2023notificaciones -Name aos2023notificaciones).LoginServer

Resp: aos2023notificaciones.azurecr.io

### PASO 1.2 - Publicar contenedor en registro ACR de Azure ###
###
### Estos comandos deben ser ejecutados desde el Azure Powershell local (no desde https://portal.azure.com/#cloudshell)
### después de autenticarse con:
###
### Connect-AzAccount
###
### y conectarse al registro con:
###
### Connect-AzContainerRegistry -Name aos2023notificaciones

# Etiquetar las imagenes locales de docker con la dirección del servidor de inicio de sesion
docker tag acarrasco2000/aos2023_notificaciones:v1 aos2023notificaciones.azurecr.io/azure-aos2023_notificaciones:v1

# Consultar las imagenes
docker images

# Publicar imagen en el registro ACR de Azure
docker push aos2023notificaciones.azurecr.io/azure-aos2023notificaciones:v1

# Consultar imagen
Get-AzContainerRegistryManifest -RegistryName aos2023notificaciones -RepositoryName azure-aos2023notificaciones
Get-AzContainerRegistryTag -RegistryName aos2023notificaciones -RepositoryName azure-aos2023notificaciones

# Consultar todas las imagenes imagenes en el registro
az acr repository list --name aos2023notificaciones --output table

# Si se desea borrar la imagen del registro (hace falta indicar el tag). Incluir siempre : dejando en blanco el tag si no existe
az acr repository delete --name aos2023notificaciones --image azure-aos2023notificaciones:v1

### PASO 2 - Implementación de un cluster de Kubernetes formado por 2 nodos

# Creación del cluster kubernetes (genera clave)
New-AzAksCluster -ResourceGroupName aos2023notificaciones -Name aos2023notificacionesCluster -NodeCount 2 -GenerateSshKey -AcrNameToAttach aos2023notificaciones
# Creación del cluster kubernetes (sin generar clave)
New-AzAksCluster -ResourceGroupName aos2023notificaciones -Name aos2023notificacionesCluster -NodeCount 2 -AcrNameToAttach aos2023notificaciones

# Instalación de la CLI de kubernetes-prepare-acr
Install-Module Az.Aks

# Conexión a un cluster mediante kubectl
Import-AzAksCredential -ResourceGroupName aos2023notificaciones -Name aos2023notificacionesCluster

# Comprobar lista de nodos del cluster
$ kubectl get nodes

# Comprobar outbound type for AKS cluster (debe ser LoadBalancer)
az aks show --name aos2023notificacionesCluster --resource-group aos2023notificaciones --query "networkProfile.outboundType" 

### Desde portal.azure.com/#cloudshell

# Detener el cluster
az aks stop --name aos2023notificacionesCluster --resource-group aos2023notificaciones

# Comprobar que el estado del cluster powerState es Stopped (hacer grep State)
az aks show --name aos2023notificacionesCluster --resource-group aos2023notificaciones

# Arrancar el cluster
az aks start --name aos2023notificacionesCluster --resource-group aos2023notificaciones

# Comprobar que el estado del cluster powerState es Running
az aks show --name aos2023notificacionesCluster --resource-group aos2023notificaciones

# Crear un volumen con Azure Disks en AKS para almacenamiento persistente
# See: https://learn.microsoft.com/es-es/azure/aks/azure-csi-disk-storage-provision

# Crear una notificación de volumen persistente con el siguiente fichero:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: azure-managed-disk
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: managed-csi
      storage: 5Gi

kubectl apply -f azure-pvc.yaml

Resp: persistentvolumeclaim/azure-managed-disk created

A partir de este momenot el volumen "azure-managed-disk" puede ser usado en los ficheros de despliegue. Por ejemplo:

      volumeMounts:
        - mountPath: "/mnt/azure"
          name: volume
  volumes:
    - name: volume
      persistentVolumeClaim:
        claimName: azure-managed-disk

### PASO 3 - Desplegar e iniciar la aplicación con kubectl apply
#
# El fichero se llama azure-aos2023notificaciones.yaml y se genera a partir de la app vote-app de Microsoft.
# El número de réplicas en ese fichero es 2.
#
# Comprobar que:
# 
#  - apiVersion del recurso de tipo "Deployment" tiene el formato apps/v1. Para el recurso de servicio lo dejamos en v1.
#  - Lo imagen del contenedor es la publicada en el registro ACR de Azure es decir aos2023notificaciones.azurecr.io/azure-aos2023notificaciones
#
# Los siguientes comandos deben ejecutarse estando conectado al cluster (por ejemplo, accediendo a https://portal.azure.com/#cloudshell)
#
# Los ficheros de kubernetes lo generamos con la herramienta kompose en Azure powershell y directorio kubernetes
../kompose-windows-amd64 convert -f ../practica_2/docker-compose.yml

# Implementar la aplicación con kubectl apply
$ kubectl apply -f azure-aos2023notificaciones
$ kubectl apply -f .

# Comprobar que el servicio está arrancado. Este comando proporciona la dirección IP externa del servicio. 
$ kubectl get service aos2023-notificaciones --watch

Resp: La dirección IP externa es 4.157.200.188

### PASO 4 - Escalado de aplicaciones
#
# Comprobar número y estado de los pods
$ kubectl get pods

# Cambiar el número de pods a 5
$ kubectl scale --replicas=5 deployment/azure-aos2023notificaciones

# Escalado automatico con kubectl
kubectl autoscale deployment azure-vote-front --cpu-percent=50 --min=3 --max=10

# Escalado manual del número de nodos
Get-AzAksCluster -ResourceGroupName aos2023notificaciones -Name aos2023notificacionesCluster | Set-AzAksCluster -NodeCount 3

### OTROS COMANDOS DEL CLUSTER ###

# Consultar todo: servicios, despliegues, etc
kubectl get all --namespace "" 

# Consultar despliegues
kubectl get deployment

# Borrar despliegue
kubectl delete deployment deployment_name

# Consultar servicios
kubectl get svc

# Borrar servicios
kubectl delete scv <service>

# Consultar los logs de pod
kubectl logs -f <pod>

# Ejecutar comando "sh" en pod (en lugar de sh se puede ejecutar cualquier otro comando)
kubectl exec --stdin --tty <pod> -- sh


#
# Configuración DNS
#

# Consulta nodos del cluster
kubectl get nodes -o wide

# Conectarse a un nodo del cluster creando un POD de prueba. El POD debe ser borrado al terminar la prueba
kubectl run -it --rm aks-ssh --namespace default --image=debian:stable

# Consultar fichero de configuración para la resolución de nombres DNS
cat /etc/resolv.conf

# Resolver entrada DNS
host -a <nombre>

# Buscar la dirección IP de un servicio (default es el namespace de defecto)
# Ejemplo: nslookup trabajos-mock-backend.svc.cluster.local
nslookup <servicio>.<namespace>.svc.cluster.local

#
# Configuración de Subred del cluster
#
# Se obtiene primero el resource group creado por AKS para desplegar los recursos gestionados por el propio cluster (empieza pòr mc_...)
az aks show --name aos2023notificacionesCluster --resource-group aos2023notificaciones --query "nodeResourceGroup"

Resp: "MC_aos2023notificaciones_aos2023notificacionesCluster_eastus"

# Ahí es donde se configura las políticas NSG (conexiones entrantes y salientes), subred (Vnet), etc. En nuestro cluster:
#
# - Subred asignada es 10.224.0.0/12
# - Se permite todo el tráfico saliente y sólo se permite el tráfico entrante a los puertos de los balanceadores
# - Disponemos de dos direcciones de IP públicas (20.75.167.190 y 20.75.166.172). Para limitar el consumo configuramos los servicios de tipo "ClusterIP" (balanceador interno) excepto para el backend e UI de notificaciones que son de tipo "LoadBalancer" (balanceador externo)
#
# Las políticas de red (network policies) también se pueden consultar por comando:
kubectl get networkpolicy --all-namespaces

Resp:
NAMESPACE     NAME                 POD-SELECTOR                                 AGE
default       practica-2-default   io.kompose.network/practica-2-default=true   36h
kube-system   konnectivity-agent   app=konnectivity-agent                       7d5h

# Consultar detalles de network policy
kubectl describe networkpolicy  